import { TBAddOnCommunicationAPI } from './index';
export declare type TBResourceType = 'account' | 'job' | 'client' | 'site' | 'checklist' | 'message' | 'channel' | 'user' | 'issue';
export declare type TBAvailableTo = 'admins' | 'all' | 'internals';
export declare class TBAPI {
    tbCommunication: TBAddOnCommunicationAPI;
    ctx?: {
        impression: string;
        key: string;
    };
    constructor(tbcom: TBAddOnCommunicationAPI, context?: {
        impression: string;
        key: string;
    });
    /**
     * reRender - re-renders the add-on to for example reflect changes made to some Taskbuddy data
     */
    reRender(): void;
    /**
     * alert - open an Alert modal inside Taskbuddy UI
     */
    alert(message: string): Promise<boolean>;
    /**
     * webView - open a Web View (iframe) modal inside Taskbuddy UI
     */
    webView(title: string, url: string): Promise<void>;
    /**
     * closeWebView - closes an open Web View (iframe) modal inside Taskbuddy UI
     */
    closeWebView(): Promise<void>;
    /**
     * linkTo - navigate to a Taskbuddy resource
     */
    linkTo(url: string): Promise<void>;
    /**
     * postInChat - post a message orininating from the active user to the specified message channel
     */
    postInChat(channelId: string, msg: string): Promise<any>;
    /**
     * getActiveContextInformation - get information about the given resource type that is in the current context
     */
    getActiveContextInformation(entity: string): Promise<any>;
    /**
     * activeAccount - get information about the active Account in context
     */
    activeAccount(): Promise<any>;
    /**
     * activeUser - get information about the active User in context
     */
    activeUser(): Promise<any>;
    /**
     * activeJob - get information about the active Job in context
     */
    activeJob(): Promise<any>;
    /**
     * activeChecklist - get information about the active Checklist in context
     */
    activeChecklist(): Promise<any>;
    /**
     * activeClient - get information about the active Client in context
     */
    activeClient(): Promise<any>;
    /**
     * activeSite - get information about the active Site in context
     */
    activeSite(): Promise<any>;
    /**
     * getResource - get information about a resource
     */
    getResource(entity: string, id: string): Promise<any>;
    /**
     * getUser - get information about a User
     */
    getUser(userId: string): Promise<any>;
    /**
     * getJob - get information about a Job
     */
    getJob(jobId: string): Promise<any>;
    /**
     * getStorage - get storage data
     */
    getStorage(type: TBResourceType, resourceId: string, key: string, availableTo: TBAvailableTo): Promise<any>;
    /**
     * setStorage - set storage data
     */
    setStorage(type: TBResourceType, resourceId: string, key: string, availableTo: TBAvailableTo, data: object): Promise<void>;
}
