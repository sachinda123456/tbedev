"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TBInitIframe = exports.TBInitAddOn = exports.TBAddOnCommunicationAPI = exports.TBAPI = void 0;
var uuid_1 = require("uuid");
var tb_api_1 = require("./tb-api");
Object.defineProperty(exports, "TBAPI", { enumerable: true, get: function () { return tb_api_1.TBAPI; } });
var tb_api_2 = require("./tb-api");
var replyToWindow = null;
var replyToOrigin = null;
var requestHandler;
var loaded = false;
var TBAddOnCommunicationAPI = /** @class */ (function () {
    function TBAddOnCommunicationAPI() {
        this.isInitialized = false;
        this.onClickListeners = [];
        this.onChangeListeners = [];
    }
    TBAddOnCommunicationAPI.prototype.requestProcessor = function (request, respond) {
        var _this = this;
        var fail = function (msg) {
            respond({
                status: 400,
                body: {
                    msg: msg,
                },
            });
        };
        if (!this.config) {
            fail('Add-on, not initialized');
            return;
        }
        var handleRenderRequest = function () {
            if (!_this.config) {
                fail('Add-on, not initialized');
                return;
            }
            if (request.data.type !== 'render') {
                fail('Cannot handle invalid render request');
                return;
            }
            var impression = _this.config.impressions.find(function (imp) { return request.data.type === 'render' && imp.name === request.data.body.name; });
            if (!impression) {
                respond({
                    status: 404,
                    body: {
                        msg: 'Not found',
                    },
                });
                return;
            }
            impression
                .renderFunc(new tb_api_2.TBAPI(_this, request.data.body.context))
                .then(function (renderResponse) {
                renderResponse.objects.forEach(function (obj) {
                    if (obj.type === 'button' && obj.onClick) {
                        var alreadyRegistered = _this.onClickListeners.find(function (c) { return c.id === obj.id && c.name === impression.name; });
                        if (!alreadyRegistered) {
                            _this.onClickListeners = __spreadArray(__spreadArray([], _this.onClickListeners, true), [
                                {
                                    id: obj.id,
                                    name: impression.name,
                                    onClick: obj.onClick,
                                },
                            ], false);
                        }
                        else {
                            alreadyRegistered.onClick = obj.onClick;
                        }
                    }
                    if (obj.onChange) {
                        var alreadyRegistered = _this.onChangeListeners.find(function (c) { return c.id === obj.id && c.name === impression.name; });
                        if (!alreadyRegistered) {
                            _this.onChangeListeners = __spreadArray(__spreadArray([], _this.onChangeListeners, true), [
                                {
                                    id: obj.id,
                                    name: impression.name,
                                    onChange: obj.onChange,
                                },
                            ], false);
                        }
                        else {
                            alreadyRegistered.onChange = obj.onChange;
                        }
                    }
                });
                respond({
                    status: 200,
                    body: renderResponse,
                });
            })
                .catch(function (err) {
                fail(JSON.stringify(err));
            });
        };
        var handleOnClick = function () {
            if (!_this.config) {
                fail('Add-on, not initialized');
                return;
            }
            if (request.data.type !== 'onClick' ||
                (typeof request.data.body.name !== 'string' && typeof request.data.body.id !== 'string')) {
                fail('Cannot handle invalid onClick request');
                return;
            }
            var onClickHandler = _this.onClickListeners.find(function (ocl) {
                return request.data.type === 'onClick' &&
                    ocl.id === request.data.body.id &&
                    ocl.name === request.data.body.name;
            });
            if (!onClickHandler) {
                respond({
                    status: 404,
                    body: {
                        msg: 'OnClick handler not found',
                    },
                });
                return;
            }
            // Execute the registered onClick handler
            onClickHandler
                .onClick(new tb_api_2.TBAPI(_this, request.data.body.context))
                .then(function () {
                respond({
                    status: 200,
                    body: {
                        msg: 'done',
                    },
                });
            })
                .catch(function (err) {
                fail(JSON.stringify(err));
            });
        };
        var handleOnChange = function () {
            if (!_this.config) {
                fail('Add-on, not initialized');
                return;
            }
            if (request.data.type === 'onChange' &&
                typeof request.data.body.name !== 'string' &&
                typeof request.data.body.id !== 'string') {
                fail('Cannot handle invalid onChange request');
                return;
            }
            var onChangeHandler = _this.onChangeListeners.find(function (ocl) {
                return request.data.type === 'onChange' &&
                    ocl.id === request.data.body.id &&
                    ocl.name === request.data.body.name;
            });
            if (!onChangeHandler) {
                respond({
                    status: 404,
                    body: {
                        msg: 'OnChange handler not found',
                    },
                });
                return;
            }
            // Execute the registered onChange handler
            onChangeHandler
                .onChange(new tb_api_2.TBAPI(_this, request.data.body.context), request.data.body.value)
                .then(function () {
                respond({
                    status: 200,
                    body: {
                        msg: 'done',
                    },
                });
            })
                .catch(function (err) {
                fail(JSON.stringify(err));
            });
        };
        var handleConfigRequest = function () {
            if (!_this.config) {
                fail('Add-on, missing configuration');
                return;
            }
            respond({
                body: __assign(__assign({}, _this.config), { impressions: _this.config.impressions.map(function (im) { return ({
                        name: im.name,
                    }); }) }),
                status: 200,
            });
        };
        var handleCSSRequest = function () {
            var _a;
            if (!_this.config) {
                fail('Add-on, missing configuration');
                return;
            }
            if ((_a = request.data.body) === null || _a === void 0 ? void 0 : _a.css) {
                var style = document.createElement('style');
                style.innerHTML = request.data.body.css;
                var ref = document.querySelector('script');
                if (ref && ref.parentNode)
                    ref.parentNode.insertBefore(style, ref);
            }
            respond({
                body: {
                    msg: 'done',
                },
                status: 200,
            });
        };
        switch (request.data.type) {
            case 'render': {
                if (request.data.cmd !== 'get') {
                    fail('cannot set render');
                    return;
                }
                handleRenderRequest();
                return;
            }
            case 'config': {
                if (request.data.cmd !== 'get') {
                    fail('cannot set config');
                    return;
                }
                handleConfigRequest();
                return;
            }
            case 'css': {
                if (request.data.cmd !== 'set') {
                    fail('cannot get css');
                    return;
                }
                handleCSSRequest();
                return;
            }
            case 'onClick': {
                if (request.data.cmd !== 'get') {
                    fail('cannot set onClick');
                    return;
                }
                handleOnClick();
                return;
            }
            case 'onChange': {
                if (request.data.cmd !== 'get') {
                    fail('cannot set onChange');
                    return;
                }
                handleOnChange();
                return;
            }
        }
        fail('Could not process command');
    };
    TBAddOnCommunicationAPI.prototype.initialize = function (config, callback) {
        var _this = this;
        this.config = config;
        this.listen('', this.requestProcessor.bind(this));
        this.untilLoaded(function () {
            _this.isInitialized = true;
            callback();
        });
    };
    TBAddOnCommunicationAPI.prototype.untilLoaded = function (onComplete) {
        var _this = this;
        if (!loaded) {
            setTimeout(function () {
                _this.untilLoaded(onComplete);
            }, 300);
        }
        else {
            onComplete();
        }
    };
    // Send request to TB
    TBAddOnCommunicationAPI.prototype.request = function (req, callback) {
        ;
        window
            ._sendTBMessage(undefined, req)
            .then(function (res) {
            callback(res);
        })
            .catch(function (err) { });
    };
    // Listen for incoming requests from TB
    TBAddOnCommunicationAPI.prototype.listen = function (filter, callback) {
        requestHandler = callback;
    };
    return TBAddOnCommunicationAPI;
}());
exports.TBAddOnCommunicationAPI = TBAddOnCommunicationAPI;
var parseWindowMessage = function (msg, source, origin) {
    var _a, _b, _c, _d;
    var obj = null;
    var strVal = '';
    var type = 'unknown';
    switch (typeof msg) {
        case 'string':
            try {
                obj = JSON.parse(msg);
                if ((_a = obj) === null || _a === void 0 ? void 0 : _a.id) {
                    type = 'add_on_request';
                }
                else if (((_c = (_b = obj) === null || _b === void 0 ? void 0 : _b.request) === null || _c === void 0 ? void 0 : _c.id) && ((_d = obj) === null || _d === void 0 ? void 0 : _d.response)) {
                    type = 'add_on_response';
                }
            }
            catch (err) {
                strVal = msg;
            }
            break;
        case 'object':
            obj = msg;
            break;
        default:
            break;
    }
    return {
        objVal: obj,
        strVal: strVal,
        type: type,
        source: source,
        origin: origin,
    };
};
var waitingFor = [];
var handleAddOnMessage = function (pMsg) {
    if (pMsg.type === 'unknown' || !pMsg.objVal)
        return;
    if (pMsg.type === 'add_on_request') {
        var req_1 = pMsg.objVal;
        if (req_1.id === 'welcome-msg') {
            loaded = true;
            replyToWindow = pMsg.source;
            replyToOrigin = pMsg.origin;
            window._sendTBMessage(req_1, {
                msg: 'thanks',
            });
            return;
        }
        // Check for request listeners
        if (requestHandler)
            requestHandler(req_1, function (data) {
                ;
                window._sendTBMessage(req_1, data);
            });
    }
    else if (pMsg.type === 'add_on_response') {
        // Check for response listeners
        var wf = waitingFor.find(function (wf1) { return wf1.mid === pMsg.objVal.request.id; });
        if (wf) {
            waitingFor = waitingFor.filter(function (wf1) { return wf1.mid !== pMsg.objVal.request.id; });
            wf.callback(pMsg);
        }
    }
};
window.addEventListener('message', function (event) {
    var pMsg = parseWindowMessage(event.data, event.source, event.origin);
    handleAddOnMessage(pMsg);
}, false);
window._sendTBMessage = function (respondingToRequest, data) {
    return new Promise(function (resolve, reject) {
        if (loaded) {
            if (!respondingToRequest) {
                // This is a request
                var req = {
                    id: (0, uuid_1.v4)(),
                    data: data,
                };
                waitingFor = __spreadArray(__spreadArray([], waitingFor, true), [
                    {
                        mid: req.id,
                        callback: function (data1) {
                            resolve(data1.objVal);
                        },
                    },
                ], false);
                if (window.tbPostMessage) {
                    ;
                    window.tbPostMessage(req);
                }
                else {
                    replyToWindow.postMessage(JSON.stringify(req), replyToOrigin);
                }
            }
            else if (respondingToRequest) {
                var res = {
                    request: respondingToRequest,
                    response: data,
                };
                if (window.tbPostMessage) {
                    ;
                    window.tbPostMessage(res);
                }
                else {
                    replyToWindow.postMessage(JSON.stringify(res), replyToOrigin);
                }
                resolve(true);
            }
        }
        else {
            reject(false);
        }
    });
};
var TBInitAddOn = function (settings) {
    var tbComm = new TBAddOnCommunicationAPI();
    tbComm.initialize(settings, function () { });
};
exports.TBInitAddOn = TBInitAddOn;
window.TaskbuddyInitAddOn = exports.TBInitAddOn;
var TBInitIframe = function (addonId, impression, callback) {
    var tbComm = new TBAddOnCommunicationAPI();
    var renderFunc = function (tbapi) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, callback(tbapi)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, { objects: [] }];
            }
        });
    }); };
    tbComm.initialize({
        id: addonId + '-' + impression,
        impressions: [
            {
                name: 'tb-add-on-iframe',
                renderFunc: renderFunc,
            },
        ],
        name: 'tb-iframe',
    }, function () { });
};
exports.TBInitIframe = TBInitIframe;
window.TaskbuddyInitIframe = exports.TBInitIframe;
