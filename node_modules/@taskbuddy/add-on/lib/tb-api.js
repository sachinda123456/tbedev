"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TBAPI = void 0;
var TBAPI = /** @class */ (function () {
    function TBAPI(tbcom, context) {
        this.tbCommunication = tbcom;
        this.ctx = context;
    }
    /**
     * reRender - re-renders the add-on to for example reflect changes made to some Taskbuddy data
     */
    TBAPI.prototype.reRender = function () {
        this.tbCommunication.request({
            cmd: 'get',
            type: 're-render',
            body: {
                context: this.ctx,
            },
        }, function (res) { });
    };
    /**
     * alert - open an Alert modal inside Taskbuddy UI
     */
    TBAPI.prototype.alert = function (message) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'get',
                type: 'alert-modal',
                body: {
                    msg: message,
                    context: _this.ctx,
                },
            }, function (res) {
                if (res.response.status === 200) {
                    resolve(true);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * webView - open a Web View (iframe) modal inside Taskbuddy UI
     */
    TBAPI.prototype.webView = function (title, url) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'get',
                type: 'web-view-modal',
                body: {
                    title: title,
                    url: url,
                    context: _this.ctx,
                },
            }, function (res) {
                resolve();
            });
        });
    };
    /**
     * closeWebView - closes an open Web View (iframe) modal inside Taskbuddy UI
     */
    TBAPI.prototype.closeWebView = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'set',
                type: 'close-web-view-modal',
                body: {
                    context: _this.ctx,
                },
            }, function (res) {
                resolve();
            });
        });
    };
    /**
     * linkTo - navigate to a Taskbuddy resource
     */
    TBAPI.prototype.linkTo = function (url) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'get',
                type: 'link-to-url',
                body: {
                    url: url,
                    context: _this.ctx,
                },
            }, function (res) {
                resolve();
            });
        });
    };
    /**
     * postInChat - post a message orininating from the active user to the specified message channel
     */
    TBAPI.prototype.postInChat = function (channelId, msg) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'set',
                type: 'post-in-chat',
                body: {
                    channelId: channelId,
                    msg: msg,
                    context: _this.ctx,
                },
            }, function (res) {
                if (res.response.status === 200) {
                    resolve(res.response.body);
                }
                else {
                    reject('Could not post chat msg');
                }
            });
        });
    };
    /**
     * getActiveContextInformation - get information about the given resource type that is in the current context
     */
    TBAPI.prototype.getActiveContextInformation = function (entity) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'get',
                type: 'active-' + entity,
                body: {
                    context: _this.ctx,
                },
            }, function (res) {
                if (res.response.status === 200) {
                    resolve(res.response.body);
                }
                else {
                    reject('Could not get active ' + entity);
                }
            });
        });
    };
    /**
     * activeAccount - get information about the active Account in context
     */
    TBAPI.prototype.activeAccount = function () {
        return this.getActiveContextInformation('account');
    };
    /**
     * activeUser - get information about the active User in context
     */
    TBAPI.prototype.activeUser = function () {
        return this.getActiveContextInformation('user');
    };
    /**
     * activeJob - get information about the active Job in context
     */
    TBAPI.prototype.activeJob = function () {
        return this.getActiveContextInformation('job');
    };
    /**
     * activeChecklist - get information about the active Checklist in context
     */
    TBAPI.prototype.activeChecklist = function () {
        return this.getActiveContextInformation('checklist');
    };
    /**
     * activeClient - get information about the active Client in context
     */
    TBAPI.prototype.activeClient = function () {
        return this.getActiveContextInformation('client');
    };
    /**
     * activeSite - get information about the active Site in context
     */
    TBAPI.prototype.activeSite = function () {
        return this.getActiveContextInformation('site');
    };
    /**
     * getResource - get information about a resource
     */
    TBAPI.prototype.getResource = function (entity, id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var body = {};
            // @ts-ignore
            body[entity + "_id"] = id;
            _this.tbCommunication.request({
                cmd: 'get',
                type: 'resource-' + entity,
                body: body,
            }, function (res) {
                if (res.response.status === 200) {
                    resolve(res.response.body);
                }
                else {
                    reject('Could not get ' + entity);
                }
            });
        });
    };
    /**
     * getUser - get information about a User
     */
    TBAPI.prototype.getUser = function (userId) {
        return this.getResource('user', userId);
    };
    /**
     * getJob - get information about a Job
     */
    TBAPI.prototype.getJob = function (jobId) {
        return this.getResource('job', jobId);
    };
    /**
     * getStorage - get storage data
     */
    TBAPI.prototype.getStorage = function (type, resourceId, key, availableTo) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'get',
                type: 'storage',
                body: {
                    context: _this.ctx,
                    type: type,
                    resourceId: resourceId,
                    key: key,
                    availableTo: availableTo,
                },
            }, function (res) {
                if (res.response.status === 200) {
                    resolve(JSON.parse(res.response.body.data));
                }
                else {
                    reject("Could not get storage for " + type + ", " + resourceId + ", " + key + ", " + availableTo);
                }
            });
        });
    };
    /**
     * setStorage - set storage data
     */
    TBAPI.prototype.setStorage = function (type, resourceId, key, availableTo, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.tbCommunication.request({
                cmd: 'set',
                type: 'storage',
                body: {
                    context: _this.ctx,
                    type: type,
                    resourceId: resourceId,
                    key: key,
                    availableTo: availableTo,
                    data: JSON.stringify(data),
                },
            }, function (res) {
                if (res.response.status === 200) {
                    resolve();
                }
                else {
                    reject("Could not set storage for " + type + ", " + resourceId + ", " + key + ", " + availableTo);
                }
            });
        });
    };
    return TBAPI;
}());
exports.TBAPI = TBAPI;
