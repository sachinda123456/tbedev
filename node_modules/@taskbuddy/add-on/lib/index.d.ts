export { ITBAddOnObject, IAddOnImpressionObject, ITBAddOnBadge, ITBAddOnButton, ITBAddOnIconLabel, ITBAddOnLabel, ITBAddOnMarkdown, ITBAddOnMultiSelect, ITBAddOnSelect, ITBAddOnSwitch, ITBAddOnTextInput, } from './impression-objects';
import { IAddOnRequest } from './add-on-request-types';
import { ITBAddOnObject } from './impression-objects';
export { TBAPI } from './tb-api';
import { TBAPI } from './tb-api';
export interface IAddOnImpression {
    name: 'home-screen' | 'job-screen' | 'map-screen' | 'config-screen' | 'tb-add-on-iframe';
    renderFunc: (tb: TBAPI) => Promise<IAddOnRenderResponse>;
}
export interface ITBAddOnConfig {
    name: string;
    id: string;
    impressions: IAddOnImpression[];
}
interface ITBAddOnResponseData {
    status: number;
    body: object;
}
interface ITBAddOnResponse {
    request: IAddOnRequest;
    response: ITBAddOnResponseData;
}
interface IAddOnRequestData {
    cmd: 'get' | 'set';
    type: string;
    body: object;
}
export interface IAddOnRenderResponse {
    objects: ITBAddOnObject[];
}
interface IAddOnClickListener {
    id: string;
    name: string;
    onClick: (tbapi: TBAPI) => Promise<void>;
}
interface IAddOnChangeListener {
    id: string;
    name: string;
    onChange: (tbapi: TBAPI, value: string) => Promise<void>;
}
export declare class TBAddOnCommunicationAPI {
    origin: any;
    source: any;
    isInitialized: boolean;
    config: ITBAddOnConfig | undefined;
    onClickListeners: IAddOnClickListener[];
    onChangeListeners: IAddOnChangeListener[];
    constructor();
    requestProcessor(request: IAddOnRequest, respond: (data: ITBAddOnResponseData) => void): void;
    initialize(config: ITBAddOnConfig, callback: () => void): void;
    untilLoaded(onComplete: () => void): void;
    request(req: IAddOnRequestData, callback: (response: ITBAddOnResponse) => void): void;
    listen(filter: string, callback: (request: IAddOnRequest, respond: (data: any) => void) => void): void;
}
export declare const TBInitAddOn: (settings: ITBAddOnConfig) => void;
export declare const TBInitIframe: (addonId: string, impression: string, callback: (tbapi: TBAPI) => Promise<void>) => void;
